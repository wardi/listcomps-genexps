List Comprehensions and Generator Expressions
---------------------------------------------

Ian Ward

Ottawa Python Authors Group

February 28


For Beginners
-------------

(this talk)


For Everyone Else
-----------------

Problem 1:

.. code-block:: python

  >>> x = ?
  >>> [x for x in x for x in x]
  ?

Problem 2:

.. code-block:: python

  >>> y = []
  >>> y.append(?)
  >>> y
  []


Why Listcomps?
--------------

.. code-block:: python

  def get_foos(stuff):
      """
      return a list of the foos in stuff
      """
      out = []
      for item in stuff:
          out.append(item.foo)
      return out

  foos = get_foos(my_stuff)


List Comprehension
------------------

.. code-block:: python

  def get_foos(stuff):
      """
      return a list of the foos in stuff
      """
      out = []
      for item in stuff:
          out.append(item.foo)
      return out

  foos = get_foos(my_stuff)

.. code-block:: python

  foos = [item.foo for item in my_stuff]


Functional-style
----------------

.. code-block:: python

  foos = map(lambda item: item.foo, my_stuff)

.. code-block:: python

  foos = [item.foo for item in my_stuff]


Filtering
---------

.. code-block:: python

  small = filter(lambda num: num < 5, values)

.. code-block:: python

  small = [num for num in values if num < 5]


Not Always Best
---------------

.. code-block:: python

  v2 = [num for num in values]

.. code-block:: python

  v2 = list(values)


Not Always Best
---------------

.. code-block:: python

  trunc = [int(num) for num in values]

.. code-block:: python

  trunc = map(int, values)


Deconstructing Listcomps
------------------------

.. code-block:: python

  out = [A for B in C]

.. code-block:: python

  out = []
  for B in C:
      out.append(A)


Deconstructing Listcomps
------------------------

.. code-block:: python

  out = [A for B in C if D]

.. code-block:: python

  out = []
  for B in C:
      if D:
          out.append(A)


Deconstructing Listcomps
------------------------

.. code-block:: python

  out = [A for B in C if D for E in F]

.. code-block:: python

  out = []
  for B in C:
      if D:
          for E in F:
              out.append(A)


Deconstructing Listcomps
------------------------

.. code-block:: python

  out = [A for B in C if D for E in F if G]

.. code-block:: python

  out = []
  for B in C:
      if D:
          for E in F:
              if G:
                  out.append(A)


Examples
--------

.. code-block:: python

  out = [book.title
         for author in authors if author.deceased
         for book in author.books if book.sold > 1e6]

Examples
--------

.. code-block:: python

  out = [(author, book)
         for author in authors
         for book in author.books]


Examples
--------

.. code-block:: python

  author_lookup = dict([(book.isbn, author)
         for author in authors
         for book in author.books])

Dict Comprehension
------------------

.. code-block:: python

  author_lookup = {book.isbn: author
         for author in authors
         for book in author.books}

Python 2.7+


Generator Expression
--------------------

.. code-block:: python

  author_lookup = dict((book.isbn, author)
                       for author in authors
                       for book in author.books)

Python 2.4+

Generator Expression
--------------------

.. code-block:: python

  num_books = sum(len(author.books)
                  for author in authors)


Generator Expression
--------------------

.. code-block:: python

  deceased = sum(1 for author in authors if author.deceased)


Generator Expression
--------------------

.. code-block:: python

  have_x = any(book.title.startswith('X')
               for author in authors
               for book in author.books)


End
---

(of serious presentation)


Stupid Listcomp Tricks
----------------------

.. code-block:: python

  >>> [x for x in range(5) for y in (1,2)]
  [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]


Stupid Listcomp Tricks
----------------------

.. code-block:: python

  >>> class Baz(object):
  ...     pass
  ...
  >>> b = Baz()
  >>> [1 for b.foo in ['bar']]
  [1]
  >>> b.foo
  'bar'


Stupid Listcomp Tricks
----------------------

.. code-block:: python

  >>> x = ?
  >>> [x for x in x for x in x]
  ?

Stupid Listcomp Tricks
----------------------

.. code-block:: python

  >>> x = [['hello', 'world'], ['nice', 'to', 'meet'], ['you']]
  >>> [x for x in x for x in x]
  ['hello', 'world', 'nice', 'to', 'meet', 'you']

.. code-block:: python

  >>> [inner for outer in x for inner in outer]

Stupid Listcomp Tricks
----------------------

.. code-block:: python

  >>> y = []
  >>> y.append(?)
  >>> y
  []

Stupid Listcomp Tricks
----------------------

.. code-block:: python

  >>> y = []
  >>> y.append([1 for y in [[]]])
  >>> y
  []

(fixed in Python 3)
